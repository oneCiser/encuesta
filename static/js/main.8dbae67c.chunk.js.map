{"version":3,"sources":["logo.svg","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Encuesta","React","useState","estado","setEstado","check","name","checked","setChecked","next","setNext","data","setData","value","ind","start","pregunta","setPregunta","encuesta","nombre","respuestas","setRespuestas","handleChange","event","target","handleChangeNext","a","console","log","preguntas","length","tempRespuestas","push","respuesta","tiempo","Date","getTime","fetch","method","headers","body","JSON","stringify","useEffect","then","response","json","catch","err","style","display","justifyContent","alignItems","height","Card","CardContent","className","htmlFor","type","id","placeholder","onChange","fontSize","opciones","map","element","index","key","margin","color","paddingTop","backgroundColor","width","onClick","disabled","slice","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8dbae67c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport shadows from '@material-ui/core/styles/shadows';\n\n\n\nfunction Encuesta() {\n  const [estado, setEstado] = React.useState(0)\n  const [checked, setChecked] = React.useState({check:false, name:null});\n  const [next, setNext] = React.useState(null)\n  const [data, setData] = React.useState(null);\n  const [pregunta, setPregunta] = React.useState({value:null,ind:-1,start:null})\n  const [respuestas, setRespuestas] = React.useState({encuesta:null,nombre:'',value:[]})\n  const handleChange = (event) => {\n    setChecked({check:event.target.checked, name:event.target.name});\n  };\n  const handleChangeNext = async () => {\n    console.log('Id pregunta: '+pregunta.ind)\n    console.log('Numero preguntas: '+data.preguntas.length)\n    console.log(checked)\n    if (estado > 0 && checked.name !== null && pregunta.ind < data.preguntas.length){\n      const tempRespuestas = respuestas.value\n      tempRespuestas.push({\n        pregunta:pregunta.value.pregunta,\n        respuesta:checked.name,\n        tiempo: (new Date().getTime() - pregunta.start)/1000\n      })\n      setRespuestas({encuesta:respuestas.encuesta,nombre:respuestas.nombre,value:tempRespuestas})\n    }\n    \n    if (estado > 0 && checked.name !== null && pregunta.ind + 1 < data.preguntas.length){\n      setPregunta({value:data.preguntas[pregunta.ind+1],ind:pregunta.ind+1,start:new Date().getTime()})\n      setChecked({check:false, name:null})\n      console.log('cambiar pregunta')\n    }\n    else if (pregunta.ind + 1 === data.preguntas.length) {\n      setPregunta({value:{pregunta:'Has finalizado, ahora solo queda enviarlo '},\n      ind:pregunta.ind+1,start:new Date().getTime()})\n      \n    }\n    else if (estado === 0){\n      setEstado(1)\n    }\n    else {\n      try {\n        const post = await fetch(\"https://encuestapsicologia.herokuapp.com/save/send\",{\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(respuestas)\n        \n      })\n      setEstado(2)\n      setPregunta({value:{pregunta:'Encuesta guardada'}})\n      } catch (error) {\n        \n      }\n      \n    \n    \n      \n    }\n    \n    setNext(!next)\n    \n  }\n\n  const handleChangeText = (event) => {\n    setRespuestas({nombre:event.target.value,encuesta:respuestas.encuesta,value:[]})\n  }\n\n  function fetchData() {\n    \n    if (data==null){\n      console.log('fethc')\n    fetch(\"https://encuestapsicologia.herokuapp.com/encuesta/1\"\n    )\n    .then(response =>response.json())\n    .then(data =>{\n      console.log(data)\n      setRespuestas({encuesta:data.nombre,value:[],nombre:''})\n      setPregunta({value:data.preguntas[0],ind:0,start:new Date().getTime()})\n      setData(data)})\n    .catch(err => console.log(err));\n  }\n  \n}\n  React.useEffect(() => { \n    fetchData();\n    console.log(pregunta)\n  },[next]);\n  return (\n    <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '100vh'}}>\n      <Card>\n        <CardContent>\n          {estado === 0 && \n          <div className=\"form-group\">\n          <label htmlFor=\"exampleInputEmail1\">Digite el nombre</label>\n          <input type=\"text\" className=\"form-control\" id=\"nombreText\" placeholder=\"Nombre\"  \n          onChange={handleChangeText}\n          />\n          </div>\n          }\n          <blockquote className='blockquote text-center' style={{fontSize:'30px'}}>\n          {estado > 0 && pregunta.value != null && pregunta.value.pregunta}\n          </blockquote>\n          \n        </CardContent>\n              <CardContent style={{display:'flex'}}>\n        <div className='container'>\n        <div className='row'>\n          {estado > 0 &&\n          pregunta.value != null && \n          pregunta.value.opciones != null && \n          pregunta.value.opciones.map((element,index) => {\n            return(\n              <div key={index} className='col text-center border border-primary rounded' \n              style={{fontSize:'25px', margin:'9px'}}>\n              {element}\n            </div>\n            )\n          })}\n        </div>\n        <div className='row'>\n        {estado > 0 &&\n        pregunta.value != null && \n        pregunta.value.respuestas != null && \n        pregunta.value.respuestas.map((element,index) => {\n          const check = (element.respuesta === checked.name)\n          const color = check ? 'green':'blue'\n          return(<div key={index} className=\"col text-center  w-100\" style={{paddingTop:'9px'}}>\n            <button type=\"button\" className='btn'\n            style={{backgroundColor:color, fontSize:'25px' ,height:'100%',\n            width:'50%'}}\n            name={element.respuesta}\n            checked={check}\n            onClick={handleChange}\n            className=\"btn btn-primary\" \n            data-toggle=\"button\" \n            aria-pressed=\"false\" \n            autoComplete=\"off\">\n              {element.respuesta}\n              </button>\n            </div>)\n        })}\n        \n      </div>\n      <div className='w-100 p-3  text-center'>\n      <button type=\"button\" className=\"btn btn-primary w-100\" name='siguiente'\n      disabled={estado == 2 || respuestas.nombre.slice().length == 0}\n      style={{fontSize:'25px' }} \n      onClick={handleChangeNext}\n      >\n        Siguiente\n      </button>\n      </div>\n      </div>\n        </CardContent>\n      </Card>\n        \n    </div>\n  )  \n}\nReactDOM.render(\n  <Encuesta/>,\n  document.getElementById('root')\n);\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}